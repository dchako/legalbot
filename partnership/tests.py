
# Generated by CodiumAI
from unittest.mock import Mock
from requests import patch
from partnership.views import sociedad_by_rut
from django.http import JsonResponse

from partnership.models import Partnership

import datetime
from django.test import RequestFactory
from partnership.models import Partner
from partnership.views import CreatePartnerView
from partnership.serializers import PartnerSerializer
import jwt


class TestCreatePartnerView:

    # Test that the 'get' method of the 'CreatePartnerView' class successfully retrieves all partners with a valid partnership id and a valid token
    def test_get_all_partners_with_valid_partnership_id_and_token(self):
        # Create a valid token
        token = jwt.encode(
            {
                'exp': datetime.datetime.now(datetime.timezone.utc)
                + datetime.timedelta(minutes=30)
            },
            'secret',
            algorithm='HS256',
        )

        # Create a valid request with the token and partnership id
        request = RequestFactory().post('/partners/', {'partnership_id': 1}, format='json')
        request.COOKIES['jwt'] = token

        # Create a valid partner
        partner = Partner.objects.create(name='Test Partner', rut='123456789', entry=0, address='Test Address')
        partner.partnership.add(1)

        # Call the 'get' method of the 'CreatePartnerView' class
        response = CreatePartnerView.as_view()(request, 1)

        # Check that the response status code is 200
        assert response.status_code == 200

        # Check that the response data matches the serialized partner data
        assert response.data == PartnerSerializer(partner).data


class TestPartnershipView:
    # Test that a new partnership can be created with valid data
    def test_create_new_partnership_with_valid_data(self):
        # Create a valid partnership data
        partnership_data = {
            'name': 'Test Partnership',
            'rut': '123456789'
        }

        # Send a POST request to create the partnership
        response = self.client.post('/partnership/', partnership_data)

        # Check that the response status code is 201 (Created)
        assert response.status_code == 201

        # Check that the partnership was created in the database
        assert Partnership.objects.filter(name='Test Partnership').exists()


class TestSociedadByRut:
    # Test that the 'sociedad_by_rut' function returns a JsonResponse with the name of the partnership associated with the given rut
    def test_sociedad_by_rut_returns_name_of_partnership(self):
        # Create a mock request object
        request = Mock()
        request.COOKIES.get.return_value = 'jwt_token'
        request.GET.get.return_value = '123456789'

        # Create a mock partner object
        partner = Mock()
        partner.partnership.first.return_value = Mock(name='Test Partnership')

        # Mock the get_object_or_404 function to return the mock partner object
        with patch('django.shortcuts.get_object_or_404', return_value=partner) as mock_get_object_or_404:
            # Call the sociedad_by_rut function
            response = sociedad_by_rut(request)

            # Assert that get_object_or_404 was called with the correct arguments
            mock_get_object_or_404.assert_called_once_with(Partner, rut='123456789')

            # Assert that the response is a JsonResponse with the correct data
            assert isinstance(response, JsonResponse)
            assert response.status_code == 200
            assert response.json() == {'nombre_sociedad': 'Test Partnership'}

    # Test that the 'sociedad_by_rut' function returns a JsonResponse with a message indicating that no partnership was found for the given rut
    def test_no_partnership_found(self):
        # Arrange
        request = RequestFactory().get('/sociedad_by_rut')
        request.COOKIES['jwt'] = 'valid_token'
        request.GET['rut'] = '123456789'

        self._extracted_from_test_rut_parameter_required_8(
            request,
            200,
            'mensaje',
            'No se encontr√≥ ninguna sociedad asociada al RUT',
        )

    def test_rut_parameter_required(self):
        # Arrange
        request = RequestFactory().get('/sociedad_by_rut')
        request.COOKIES = {'jwt': 'token'}
        self._extracted_from_test_rut_parameter_required_8(
            request, 400, 'error', 'Parameter "rut" is required'
        )

    def _extracted_from_test_rut_parameter_required_8(
        self, request, arg1, arg2, arg3
    ):
        response = sociedad_by_rut(request)
        assert response.status_code == arg1
        assert response.json() == {arg2: arg3}
